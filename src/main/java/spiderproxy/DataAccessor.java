/**
 * DataAccessor
 * @author Andrew Kulpa & Darren Wolbers
 * @since May. 1, 2018
 * @version 1.0
 */

package spiderproxy;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import org.w3c.dom.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.xml.sax.SAXException;

public class DataAccessor {
    public static final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();
    public static String path = "map/";

    /**
     * Check whether the path directory has been created. If not, create it!
     */
    public static void checkAndCreateDirectory(){
        File directory = new File(path);
        if (!directory.exists()) {
            directory.mkdir();
        }
    }

    /**
     * Using a given filename, attempt to retrieve the file and parse it as an
     * XML document. Then, return this parsed XML document.
     * 
     * @param filename the name of an XML file
     * @return the XML Document referenced by the filename String
     * @throws ParserConfigurationException caused by docFactory.newDocumentBuilder()
     * @throws SAXException caused by docBuilder.parse(new File(filename))
     * @throws IOException caused by docBuilder.parse(new File(filename))
     */
    public static Document getDocFromFile(String filename) throws ParserConfigurationException, SAXException, IOException {
        rwl.readLock().lock();
        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
        Document xmlDocument;
        try {
            xmlDocument = docBuilder.parse(new File(filename));
            xmlDocument.getDocumentElement().normalize();
        } finally {
            rwl.readLock().unlock();
        }
        return xmlDocument;
    }

    /**
     * Check for and return a File object pointing to a given XML file within the
     * directory specified by the path static class variable.
     * 
     * @param hostname a String hostname for a given domain
     * @return the XML File referenced by the hostname
     */
    public static File getXMLFile(String hostname) {
        DataAccessor.checkAndCreateDirectory();
        rwl.readLock().lock();
        File sitemap ;
        try {
            sitemap = new File(path + hostname + ".xml");
        } finally {
            rwl.readLock().unlock();
        }
        return sitemap;
    }
    
    /**
     * Look within the folder specified by the static class path variable and
     * return all files (not directories) within the folder.
     * 
     * @return an arraylist consisting of filename strings
     */
    public static ArrayList<String> getXMLFileList(){
        DataAccessor.checkAndCreateDirectory();
        rwl.readLock().lock();
        ArrayList<String> files = new ArrayList<>();
        try {
            File[] XMLFiles = new File(path).listFiles();
            for(File XMLFile : XMLFiles){
                if(XMLFile.isFile()){
                    files.add(XMLFile.getName());
                }
            }
        } finally {
            rwl.readLock().unlock();
        }
        return files;
    }

    /**
     * Using the passed xmlDoc and the File descriptor sitemap, write to the
     * given file using a Transformer generated by the TransformerFactory. 
     * 
     * @param xmlDoc the XML doc that is to be written to the file
     * @param sitemap a File object related to a given sitemap
     * @throws TransformerConfigurationException thrown by transformerFactory.newTransformer()
     * @throws TransformerException thrown by transformerFactory.newTransformer() or transformer.transform(sourceFile, result)
     */
    public static void writeXMLToFile(Document xmlDoc, File sitemap) throws TransformerConfigurationException, TransformerException {
        rwl.writeLock().lock();
        try {
            System.out.println("Writing to sitemap...");
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource sourceFile = new DOMSource(xmlDoc);
            StreamResult result = new StreamResult(sitemap);
            transformer.transform(sourceFile, result);
        } finally {
            rwl.writeLock().unlock();
        }
    }
}
